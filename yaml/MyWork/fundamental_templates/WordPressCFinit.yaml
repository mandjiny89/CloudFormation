AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This Template is a example how to use CloudFormation init function, as per the below template it will create a instance
  and configure Wordpress webserver with mariadb database. Once the deployment successful we can start check using public IP.
  This is not fully working yet, have to edit CFNInit.

Parameters:
  MyAZ:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: We just using Ireland as our Region.
    ConstraintDescription: Must be a valid Availability Zone.
  MyKeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: Key will be pre-created in the AWS environment which can be used using this parameters.
  MySubnetCIDR:
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range like x.x.x.x/x
  DBName:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Default: wordpressdb
    Description: The WordPress database name
    MaxLength: '64'
    MinLength: '1'
    Type: String
  DBPassword:
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
    Description: The WordPress database admin account password
    MaxLength: '40'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  DBRootPassword:
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
    Description: MySQL root password
    MaxLength: '41'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  DBUser:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Description: The WordPress database admin account username
    MaxLength: '16'
    MinLength: '1'
    Type: String
  MyInstanceType:
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.small
    Description: WebServer EC2 instance type
    Type: String

Mappings: # Need to mention appropriate AMI ID as per region and Architecture
  RegionMap:
    us-east-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    us-west-2:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    us-west-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    eu-west-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    ap-southeast-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    ap-northeast-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    ap-southeast-2:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    ap-northeast-2:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    ap-northeast-3:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    ap-south-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    us-east-2:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    sa-east-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    cn-north-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    cn-northwest-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    eu-central-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    eu-west-2:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    ca-central-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    eu-west-3:
      "32": "ami-018bb975"
      "64": "ami-466768ac"

Resources:
  MyEc2Instance:
    Type: "AWS::EC2::Instance"
    DependsOn:
      - MySecurityGroup
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          wordpress_install:
          - install_cfn
          - install_wordpress
          - configure_wordpress
        configure_wordpress:
          commands:
            01_set_mysql_root_password:
              command: !Sub |
                mysqladmin -u root password '${DBRootPassword}'
              test: !Sub |
                $(mysql ${DBName} -u root --password='${DBRootPassword}' >/dev/null 2>&1 </dev/null); (( $? != 0 ))
            02_create_database:
              command: !Sub |
                mysql -u root --password='${DBRootPassword}' < /tmp/setup.mysql
              test: !Sub |
                $(mysql ${DBName} -u root --password='${DBRootPassword}' >/dev/null 2>&1 </dev/null); (( $? !=0))
            03_configure_wordpress:
              command: /tmp/create-wp-config
              cwd: /var/www/html/wordpress
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack= ${AWS::StackId}
                region=${AWS::Region}
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.MyEc2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource MyEc2Instance --configsets wordpress_install --url https://stackbuilder.amazonaws.com
              group: root
              mode: '000400'
              owner: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_wordpress:
          files:
            /tmp/create-wp-config:
              content: !Sub |
                #!/bin/bash -xe
                sudo yum update -y
                sudo yum update -y aws-cfn-bootstrap
                cp /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php
                sed -i "s/'database_name_here'/'${DBName}'/g" wp-config.php
                sed -i "s/'username_here'/'${DBUser}'/g" wp-config.php
                sed -i "s/'password_here'/'${DBPassword}'/g" wp-config.php
              group: root
              mode: '000500'
              owner: root
            /tmp/setup.mysql:
              content: !Sub |
                CREATE DATABASE ${DBName};
                CREATE USER '${DBUser}'@'localhost' IDENTIFIED BY '${DBPassword}';
                GRANT ALL ON ${DBName}.* TO '${DBUser}'@'localhost';
                FLUSH PRIVILEGES;
              group: root
              mode: '000400'
              owner: root
          packages:
            yum:
              httpd: []
              mysql: []
              mysql-devel: []
              mysql-libs: []
              mysql-server: []
              php: []
              php-mysql: []
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
              mysqld:
                enabled: true
                ensureRunning: true
              mariadb:
                enabled: true
                ensureRunning: true
          sources:
            /var/www/html: http://wordpress.org/latest.tar.gz
    Properties:
      AvailabilityZone: !Ref MyAZ
      ImageId: !FindInMap [RegionMap,!Ref "AWS::Region", 64 ] #ami-466768ac
      InstanceType: !Ref MyInstanceType # MyInstanceType
      InstanceInitiatedShutdownBehavior: terminate # This terminate is case sensitive
      KeyName: !Ref MyKeyName
      Monitoring: False
      SecurityGroupIds:
        - !Ref MySecurityGroup
      SubnetId: !Ref MySubnet
      Tags:
        - Key: Name
          Value: WebServer
        - Key: Group
          Value: Belongs to Webserver VPC
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash -xe
           yum update -y aws-cfn-bootstrap
           /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource MyEc2Instance --configsets wordpress_install --region ${AWS::Region}
           /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource MyEc2Instance --region ${AWS::Region}

  MyVpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsSupport: True # This is also case sensitive
      EnableDnsHostnames: True # This is also case sensitive
      Tags:
        - Key: Name
          Value: Webserver

  MyIgw:
    Type: AWS::EC2::InternetGateway
    Properties: # {} user this open curly brackets if you don't have any properties
      Tags:
        - Key: Name
          Value: WebServerIGW

  MyVpcGwAttachement:
    Type: "AWS::EC2::VPCGatewayAttachment"
    DependsOn:
      - MyVpc
      - MyIgw
    Properties:
      InternetGatewayId: !Ref MyIgw
      VpcId: !Ref MyVpc
#      VpnGatewayId: String

  MyRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: Public

  MyRoute:
    Type: "AWS::EC2::Route"
    DependsOn: MyVpcGwAttachement
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref MyRouteTable
      GatewayId: !Ref MyIgw
#     EgressOnlyInternetGatewayId: !Ref MyIgw
#     InstanceId: !Ref MyEc2Instance # You must specify only one of the following properties: EgressOnlyInternetGatewayId, GatewayId, InstanceId, NatGatewayId, NetworkInterfaceId, or VpcPeeringConnectionId

  MySubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Ref MyAZ
      CidrBlock: !Ref MySubnetCIDR
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: PublicSubnetGroup
      VpcId: !Ref MyVpc

  MySubnetRTAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref MyRouteTable
      SubnetId: !Ref MySubnet

  MySecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: SSH-Group
      GroupDescription: This SG will be used to access Ec2 in Public network
#      SecurityGroupEgress:
#        - Security Group Rule
      SecurityGroupIngress:
#        - !Ref MySGIngress
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SSH and HTTP
        - Key: Account
          Value: Production
      VpcId: !Ref MyVpc

Outputs:
  MyOutput:
    Value: !GetAtt MyEc2Instance.PublicIp
    Value: !GetAtt MyEc2Instance.PublicDnsName
    Description: This will get me my EC2 instance public IP
    Export:
      Name: PublicIp
    Export:
      Name: PublicDnsName