AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This Template has Mapping in different format, Mapping will not accept any description.

Parameters:
  MyDescriptionParameter:
    Type: String
    Description: >-
      This is the basic parameters code to referencing in Future.

#  MyVpcp:
#    Type: AWS::EC2::VPC::Id
#    ConstraintDescription: must be a valid VPC ID which should be created in user account

#  MyInstanceType:
#    Type: String
#    Description: >-
#      By default t2.micro will be detected,
#      if you want to make any change please select the appropriate type.
#    Default: t2.micro
#    AllowedValues: # Below section is called list
#      - t2.micro
#      - t2.small
#      - m1.small
#      - m2.large
#    ConstraintDescription: Must be a valid Ec2 instance

  MyAZ:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: We just using Ireland as our Region.
    ConstraintDescription: Must be a valid Availability Zone.

  MyKeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: Key will be pre-created in the AWS environment which can be used using this parameters.

  MySubnetCIDR:
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range like x.x.x.x/x

#  Ec2SubnetIpBlocks:
#    Description: "Comma-delimited list of three CIDR blocks, is a alternative way to create multiple Subnet"
#    Type: CommaDelimitedList
#    Default: "192.168.1.0/24, 192.168.2.0/24, 192.168.3.0/24"

  PortSSH:
    Type: Number
    MinValue: 0
    MaxValue: 1024
    ConstraintDescription: Must be valid port number
  PortHTTP:
    Type: Number
    MinValue: 0
    MaxValue: 1024
    ConstraintDescription: Must be valid port number

  EnvironmentName:
    Description: Environment Name
    Type: String
    AllowedValues: [development, production, management, sandbox]
    ConstraintDescription: must be development or production

Mappings:
  RegionMap:
    us-east-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    us-west-2:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    us-west-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    eu-west-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    ap-southeast-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    ap-northeast-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    ap-southeast-2:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    ap-northeast-2:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    ap-northeast-3:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    ap-south-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    us-east-2:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    sa-east-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    cn-north-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    cn-northwest-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    eu-central-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    eu-west-2:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    ca-central-1:
      "32": "ami-018bb975"
      "64": "ami-466768ac"
    eu-west-3:
      "32": "ami-018bb975"
      "64": "ami-466768ac"

#    AWSRegionArch2AMI:
#    us-east-1:
#      PV64: ami-2a69aa47
#      HVM64: ami-7f6aa912
#      HVMG2: ami-3353c649
#    us-west-2:
#      PV64: ami-7f77b31f
#      HVM64: ami-f469ad94
#      HVMG2: ami-58ce1220
#    us-west-1:
#      PV64: ami-a2490dc2
#      HVM64: ami-594b0f39
#      HVMG2: ami-62ad9502
#    eu-west-1:
#      PV64: ami-4cdd453f
#      HVM64: ami-c5da42b6
#      HVMG2: ami-41bc0a38
#    eu-west-2:
#      PV64: NOT_SUPPORTED
#      HVM64: ami-896369ed
#      HVMG2: NOT_SUPPORTED
#    eu-west-3:
#      PV64: NOT_SUPPORTED
#      HVM64: NOT_SUPPORTED
#      HVMG2: NOT_SUPPORTED
#    eu-central-1:
#      PV64: ami-6527cf0a
#      HVM64: ami-e526ce8a
#      HVMG2: ami-b50d8fda
#    ap-northeast-1:
#      PV64: ami-3e42b65f
#      HVM64: ami-7f4db91e
#      HVMG2: ami-14e45872
#    ap-northeast-2:
#      PV64: NOT_SUPPORTED
#      HVM64: ami-39448f57
#      HVMG2: NOT_SUPPORTED
#    ap-northeast-3:
#      PV64: NOT_SUPPORTED
#      HVM64: NOT_SUPPORTED
#      HVMG2: NOT_SUPPORTED
#    ap-southeast-1:
#      PV64: ami-df9e4cbc
#      HVM64: ami-a69b49c5
#      HVMG2: ami-2a80d649
#    ap-southeast-2:
#      PV64: ami-63351d00
#      HVM64: ami-10361e73
#      HVMG2: ami-02c42e60
#    ap-south-1:
#      PV64: NOT_SUPPORTED
#      HVM64: ami-fdbed492
#      HVMG2: ami-f6165899
#    us-east-2:
#      PV64: NOT_SUPPORTED
#      HVM64: ami-d90c57bc
#      HVMG2: NOT_SUPPORTED
#    ca-central-1:
#      PV64: NOT_SUPPORTED
#      HVM64: ami-33f34157
#      HVMG2: NOT_SUPPORTED
#    sa-east-1:
#      PV64: ami-1ad34676
#      HVM64: ami-aed144c2
#      HVMG2: NOT_SUPPORTED
#    cn-north-1:
#      PV64: ami-77559f1a
#      HVM64: ami-14519b79
#      HVMG2: NOT_SUPPORTED
#    cn-northwest-1:
#      PV64: ami-80707be2
#      HVM64: ami-ec868c8e
#      HVMG2: NOT_SUPPORTED

  ChooseEnvironment:
    development:
      instanceType: t2.micro
    production:
      instanceType: t2.micro
    management:
      instanceType: t2.micro
    sandbox:
      instanceType: t2.micro

Resources:
  MyEc2Instance:
    Type: "AWS::EC2::Instance"
    DependsOn:
      - MySecurityGroup
#      - MySGIngress
    Properties:
      AvailabilityZone: !Ref MyAZ
      ImageId: !FindInMap [RegionMap,!Ref "AWS::Region", 64 ] #ami-466768ac
      InstanceType: !FindInMap [ChooseEnvironment, !Ref 'EnvironmentName', instanceType ] # MyInstanceType
      InstanceInitiatedShutdownBehavior: terminate # This terminate is case sensitive
      KeyName: !Ref MyKeyName
      Monitoring: False
      SecurityGroupIds:
        - !Ref MySecurityGroup
      SubnetId: !Ref MySubnet
      Tags:
        - Key: Name
          Value: WebServer
        - Key: Group
          Value: Belongs to Webserver VPC
#      UserData: !Base64 |
#           #!/bin/bash
#           sudo yum update -y
#           sudo yum install php-gd -y
#           sudo yum install php php-mysqlnd -y
#           sudo yum install php-mbstring -y
#           sudo yum install mariadb-server mariadb-libs -y
#           sudo systemctl start mariadb
#           sudo systemctl start httpd
#           sudo systemctl enable mariadb
#           sudo systemctl enable mariadb
#           cd /var/www/html/
#           sudo chown ec2-user /var/www/html

  MyVpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsSupport: True # This is also case sensitive
      EnableDnsHostnames: True # This is also case sensitive
      Tags:
        - Key: Name
          Value: Webserver

  MyIgw:
    Type: AWS::EC2::InternetGateway
    Properties: # {} user this open curly brackets if you don't have any properties
      Tags:
        - Key: Name
          Value: WebServerIGW

  MyVpcGwAttachement:
    Type: "AWS::EC2::VPCGatewayAttachment"
    DependsOn:
      - MyVpc
      - MyIgw
    Properties:
      InternetGatewayId: !Ref MyIgw
      VpcId: !Ref MyVpc
#      VpnGatewayId: String

  MyRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: Public

  MyRoute:
    Type: "AWS::EC2::Route"
    DependsOn: MyVpcGwAttachement
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref MyRouteTable
      GatewayId: !Ref MyIgw
#     EgressOnlyInternetGatewayId: !Ref MyIgw
#     InstanceId: !Ref MyEc2Instance # You must specify only one of the following properties: EgressOnlyInternetGatewayId, GatewayId, InstanceId, NatGatewayId, NetworkInterfaceId, or VpcPeeringConnectionId

  MySubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Ref MyAZ
      CidrBlock: !Ref MySubnetCIDR
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: PublicSubnetGroup
      VpcId: !Ref MyVpc

#  Ec2Subnet1:
#    Type: AWS::EC2::Subnet
#    Properties:
#      VpcId: !Ref MyVpc
#      MapPublicIpOnLaunch: True
#      # the select function allows us to select across a list
#      CidrBlock: !Select [0, !Ref Ec2SubnetIpBlocks]
#  Ec2Subnet2:
#    Type: AWS::EC2::Subnet
#    Properties:
#      VpcId: !Ref MyVpc
#      # the select function allows us to select across a list
#      CidrBlock: !Select [1, !Ref Ec2SubnetIpBlocks]
#  Ec2Subnet3:
#    Type: AWS::EC2::Subnet
#    Properties:
#      VpcId: !Ref MyVpc
#      # the select function allows us to select across a list
#      CidrBlock: !Select [2, !Ref Ec2SubnetIpBlocks]

  MySubnetRTAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref MyRouteTable
      SubnetId: !Ref MySubnet

  MySecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: SSH-Group
      GroupDescription: This SG will be used to access Ec2 in Public network
#      SecurityGroupEgress:
#        - Security Group Rule
      SecurityGroupIngress:
#        - !Ref MySGIngress
        - IpProtocol: tcp
          FromPort: !Ref PortSSH
          ToPort: !Ref PortSSH
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref PortHTTP
          ToPort: !Ref PortHTTP
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SSH and HTTP
        - Key: Account
          Value: Production
      VpcId: !Ref MyVpc

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "This is General Description"
        Parameters:
          - MyDescriptionParameter
      - Label:
          default: "Network Configuration"
        Parameters:
          - MyAZ
          - MySubnetCIDR
      - Label:
          default: "EC2 Configuration"
        Parameters:
          - MyInstanceType
          - MyKeyName
          - PortSSH
          - PortHTTP
    ParameterLabels:
      VPCID:
        default: "Which VPC should this be deployed to?"

Outputs:
  MyOutput:
    Value: !GetAtt MyEc2Instance.PublicIp
    Description: This will get me my EC2 instance public IP
    Export:
      Name: PublicIp

# Now create a new stack and we can add the Public IP to carryout some other activity, using the  - !ImportValue SSHSecurityGroup in anywhere in the resource file.